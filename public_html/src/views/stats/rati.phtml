<?php iterateUsers(function($user, $otherUser) { ?>
<div class="section score-dist">
	<h2>
		<i data-title="Count of all entries scored with given rating, in a bar chart form" class="tooltipable icon-tooltip"></i>
		<?php if (count($this->users) > 1): ?>
			<a href="<?php echo $this->mgHelper->constructUrl(null, null, [], $user->getLinkableName()) ?>">
				<?php echo $user->getPublicName() ?>
			</a>
			&rsquo;s rating distribution
		<?php else: ?>
			Rating distribution
		<?php endif ?>
	</h2>
	<div class="section-body">
		<?php if ($this->scoreDistribution[$user->getID()]->getRatedCount() == 0): ?>
			<p>No ratings, no graphs.<br>
			MALgraph can&rsquo;t render those shiny bars until you feed it some data.</p>
		<?php else: ?>
			<ul class="infobox">
				<li>
					<div>
						<span class="prefix">Total rated</span>
						<span class="subject"><?php printf('%d', $this->scoreDistribution[$user->getID()]->getRatedCount()) ?></span>
					</div>
				</li>
				<li>
					<div>
						<span class="prefix">Mean score</span>
						<span class="subject"><?php printf('%.02f', $this->scoreDistribution[$user->getID()]->getMeanScore()) ?></span>
					</div>
				</li>
				<li>
					<div>
						<span class="prefix">Std dev</span>
						<span class="subject"><?php printf('%.02f', $this->scoreDistribution[$user->getID()]->getStandardDeviation()) ?></span>
					</div>
				</li>
				<li>
					<button class="btn export-trigger">Export</button>
				</li>
			</ul>

			<div class="wrapper wrapper-target">
				<div class="target"></div>
				<div class="clear"></div>
			</div>

			<div class="wrapper wrapper-more">
			</div>

			<div class="wrapper wrapper-export">
				<div class="popup export">
					<div class="title">
						Export <?php echo ChibiRegistry::getHelper('mg')->amText() ?>
					</div>
					<div class="body">
						<p>You can export your rating distribution as an image, which updates automatically every 24h. How about putting it on your MAL profile?</p>
						<div class="header">
							<select name="type"></select>
							<select name="theme"></select>
							<div class="clear"></div>
						</div>
						<div>
							<textarea readonly="readonly" name="bbcode">[center][url=http://<?php echo $_SERVER['SERVER_NAME'] ?>/<?php echo $user->getLinkableName() ?>][img]http://<?php echo $_SERVER['SERVER_NAME'] ?>/export/<?php echo $user->getLinkableName() ?>?type=1[/img][/url][/center]</textarea>
						</div>
						<div class="preview">
							<p>Preview (may be scaled):</p>
							<img alt="Preview">
						</div>
					</div>
				</div>
			</div>

			<script type="text/javascript">
				$('#user-<?php echo $user->getRuntimeID() ?> .score-dist .target').each(function() {
					var chart = new Highcharts.Chart({
						chart: { renderTo: this, type: 'bar', marginRight: 35 },
						xAxis: { categories: <?php echo json_encode(array_map(function($x) { return $x == 0 ? '-' : $x; }, $this->scoreDistribution[$user->getID()]->getGroupsKeys())) ?>, title: { text: 'Rating' } },
						yAxis: { title: { text: 'Count', margin: 15 } },
						tooltip: { formatter: function() {
							var text;
							if (this.x == '-') {
								text = 'Unrated titles: ' + this.y;
							} else {
								text = 'Titles rated with ' + this.x + ': ' + this.y;
							}
							var percent = this.y * 100.0 / <?php echo max(1, $this->scoreDistribution[$user->getID()]->getTotalSize()) ?>;
							text = text + ' (' + (Math.round(percent * 100.0) / 100.0) + '%)';
							return text;
						} },
						series: [ {
							data: <?php echo json_encode(array_values($this->scoreDistribution[$user->getID()]->getGroupsSizes())) ?>,
							point: { events: { click: function(e) {
								var target = $('#user-<?php echo $user->getRuntimeID() ?> .score-dist .wrapper-more');
								var category = this.category;
								toggleMoreDiv(target, category, function(postCallback) {
									var url = '<?php echo UrlHelper::url('ajax/ajax') ?>';
									var data = <?php echo json_encode(['u' => $user->getLinkableName(), 'am' => $this->am]) ?>;
									data['reason'] = 'score';
									data['score'] = category;
									$.get(url, data, function(response) {
										$(target).html(response);
										postCallback();
									});
								});
							} } }
						} ]
					});
				});
			</script>
		<?php endif ?>
	</div>
</div>
<?php }); ?>



<?php iterateUsers(function($user, $otherUser) { ?>
<div class="section score-time-dist">
	<h2>
		<i data-title="How much time have you spent on titles rated with given score?" class="tooltipable icon-tooltip"></i>
		<?php if (count($this->users) > 1): ?>
			<a href="<?php echo $this->mgHelper->constructUrl(null, null, [], $user->getLinkableName()) ?>">
				<?php echo $user->getPublicName() ?>
			</a>
			&rsquo;s ratings vs. time spent
		<?php else: ?>
			Ratings vs. time spent
		<?php endif ?>
	</h2>
	<div class="section-body">
		<?php if ($this->scoreDistribution[$user->getID()]->getRatedCount() == 0): ?>
			<p>Couldn&rsquo;t find ratings on your list.<br>
			Rate some <?php echo $this->mgHelper->amText() ?> and come back in 24 hours.</p>
		<?php else: ?>
			<ul class="infobox">
				<li>
					<div>
						<span class="prefix">Total time</span>
						<span class="subject"><?php printf('%.02f', $this->scoreDurationDistribution[$user->getID()]->getTotalTime() / 1440.) ?></span>
						<span class="suffix">days</span>
					</div>
				</li>
				<li>
					<div>
						<span class="prefix">Mean score</span>
						<span class="subject"><?php printf('%.02f', $this->scoreDurationDistribution[$user->getID()]->getMeanScore()) ?></span>
						<span class="suffix">(weighted)</span>
					</div>
				</li>
			</ul>

			<div class="wrapper wrapper-target">
				<div class="target"></div>
				<div class="clear"></div>
			</div>

			<div class="wrapper wrapper-more">
			</div>

			<script type="text/javascript">
				$('#user-<?php echo $user->getRuntimeID() ?> .score-time-dist .target').each(function() {
					var chart = new Highcharts.Chart({
						chart: { renderTo: this, type: 'bar', marginRight: 15 },
						xAxis: { categories: <?php echo json_encode(array_map(function($x) { return $x == 0 ? '-' : $x; }, $this->scoreDistribution[$user->getID()]->getGroupsKeys())) ?>, title: { text: 'Rating' } },
						yAxis: { title: {text: 'Hours spent', margin: 15 } },
						tooltip: { formatter: function() {
							var text;
							if (this.x == '-') {
								text = 'Hours spent on unrated titles: ' + Math.round(this.y * 100) / 100.0;
							} else {
								text = 'Hours spent on titles rated with ' + this.x + ': ' + Math.round(this.y * 100) / 100.0;
							}
							var percent = this.y * 100.0 / <?php echo max(1, $this->scoreDurationDistribution[$user->getID()]->getTotalSize()) ?>;
							text = text + ' (' + (Math.round(percent * 100.0) / 100.0) + '%)';
							return text
						} },
						series: [ {
							data: <?php echo json_encode(array_map(function($x) { return $x / 60.; }, array_values($this->scoreDurationDistribution[$user->getID()]->getGroupsSizes()))) ?>,
							point: { events: { click: function(e) {
								var target = $('#user-<?php echo $user->getRuntimeID() ?> .score-time-dist .wrapper-more');
								var category = this.category;
								toggleMoreDiv(target, category, function(postCallback) {
									var url = '<?php echo UrlHelper::url('ajax/ajax') ?>';
									var data = <?php echo json_encode(['u' => $user->getLinkableName(), 'am' => $this->am]) ?>;
									data['reason'] = 'score-time';
									data['score'] = category;
									$.get(url, data, function(response) {
										$(target).html(response);
										postCallback();
									});
								});
							} } }
						} ]
					});
				});
			</script>
		<?php endif ?>
	</div>
</div>
<?php }); ?>



<script type="text/javascript">
	$(function() {
		$('.export-trigger').click(function(e) {
			e.preventDefault();
			var target = $(this).parents('.section-body').find('.export.popup');
			togglePopup(target);
			updatePreview(target);
		});

		function updatePreview(target) {
			var img = $(target).find('img');
			var matches = $(target).find('textarea').val().match(/\[img\]([^\[]*)\[\/img]/);
			img.attr('src', matches[1]);
		}

		var types =
		[
			{ 'type': 1, 'name': 'Anime' },
			{ 'type': 2, 'name': 'Manga' },
			{ 'type': 3, 'name': 'Anime & manga' },
		];
		$('select[name=\'type\']').each(function() {
			for (var i in types) {
				$(this).append($('<option/>').text(types[i]['name']).data('type', types[i]['type']));
			}
			$(this).change(function() {
				var textarea = $(this).parents('.export').find('textarea');
				var type = $(this).find('option:selected').data('type');
				textarea.val(textarea.val().replace(/(type=[0-9]*)/, 'type=' + type));
				updatePreview($(this).parents('.export'));
			});
		});

		var themes =
		[
			{ 'params': { }, 'name': 'Blue (default)' },
			{ 'params': { 'bar1': '00ffaaaa', 'bar2': '00ee6677', 'line1': 'c0ffaaaa', 'line2': 'c0ee6677', 'back': 'ffffffff', 'font1': '20442233', 'font2': '85aa4444', 'title': '00cc5566' }, 'name': 'Pink' },
			{ 'params': { 'bar1': '0044ff44', 'bar2': '00008800', 'line1': 'dd44ff44', 'line2': 'dd00aa00', 'back': 'ffffffff', 'font1': '20227722', 'font2': '90227722', 'title': '00227722' }, 'name': 'Green' },
			{ 'params': { 'bar1': '00eecc05', 'bar2': '00dd2200', 'line1': 'aaffdd00', 'line2': 'aaff0000', 'back': 'ffffffff', 'font1': '20220700', 'font2': '90220700', 'title': '00220700'  }, 'name': 'Flame (yellow + red)' },
			{ 'params': { 'bar1': 'aa000000', 'bar2': '33000000', 'line1': 'ff000000', 'line2': 'dd000000', 'back': 'ffffffff', 'font1': '20000000', 'font2': '90000000', 'title': '20000000' }, 'name': 'Gray' },
			{ 'params': { 'bar1': '0084a0d4', 'bar2': '0003359a', 'line1': '00446084', 'line2': '0001156a', 'back': '00000000', 'font1': '00779fe2', 'font2': '50779fe2', 'title': '00779fe2' }, 'name': 'unBlue (blue on black)' },
			{ 'params': { 'bar1': '0044ff44', 'bar2': '00008800', 'line1': '00004400', 'line2': '00008800', 'back': '00000000', 'font1': '2044ff44', 'font2': '00008800', 'title': '0033aa33' }, 'name': 'Matrix (green on black)' },
		];
		$('select[name=\'theme\']').each(function() {
			for (var i in themes) {
				$(this).append($('<option/>').text(themes[i]['name']).data('params', themes[i]['params']));
			}
			$(this).change(function() {
				var textarea = $(this).parents('.export').find('textarea');
				var params = $(this).find('option:selected').data('params');
				var merged = '';
				for (key in params) {
					merged += '&' + key + '=' + params[key];
				}
				textarea.val(textarea.val().replace(/(type=[0-9]*).*?\[/, '$1' + merged + '['));
				updatePreview($(this).parents('.export'));
			});
		});

		$('.export textarea').click(function() {
			$(this).select();
		});
	});
</script>
